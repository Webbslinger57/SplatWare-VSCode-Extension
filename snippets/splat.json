{
    "Subroutine Template": {
        "prefix": "subroutine",
        "body": [
            ";region ${1:subroutineName}",
            ";===============================================================================",
            ";DESCRIPTION:",
            "; ${2:Description of the subroutine}",
            ";PARAMETERS:",
            ";  -> ${3:Input parameters}",
            ";RETURNS:",
            "; <-  ${4:Return values}",
            ";===============================================================================",
            "${1:subroutineName}:",
            "   ${5:code}",
            "",
            "   Return",
            ";endregion ${1:subroutineName}"
        ],
        "description": "Template for a subroutine"
    },
    "Function Template": {
        "prefix": "function",
        "body": [
            ";region ${1:functionName}",
            ";===============================================================================",
            ";DESCRIPTION:",
            "; ${2:Description of the function}",
            ";PARAMETERS:",
            ";  -> ${3:Input parameters}",
            ";RETURNS:",
            "; <-  ${4:Return values}",
            ";===============================================================================",
            "${1:functionName}",
            "   ${5:code}",
            "",
            "   GoTo          ${6:exit}",
            ";endregion ${1:functionName}"
        ]
    },
    "Switch Statement Template": {
        "prefix": "switch",
        "body": [
            "   BranchM        ${1:variable}",
            "     Target       ${2:case1}",
            "     Target       ${3:case2}",
            "     Target       ${4:case3}",
            "     Target       ${5:case4}"
        ]
    },
    "If Greater Template": {
        "prefix": "if x > y",
        "body": [
            ";region If ${1:variable}(mem) > ${2:threshold}(const)",
            "   Recall         ${1:variable}",
            "   GoIfXGT        ${2:threshold},${3:label}",
            ";endregion ${1:variable} > ${2:threshold}"
        ]
    },
    "If Greater Template (float)": {
        "prefix": "if x > y (float)",
        "body": [
            ";region If ${1:variable}(mem) > ${2:threshold}(mem) (float)",
            "   fRecallW       ${1:variable}",
            "   fRecallQ       ${2:threshold}",
            "   fGoIfWGTQ      ${3:label}",
            ";endregion ${1:variable} > ${2:threshold} (float)"
        ]
    },
    "If Less Template": {
        "prefix": "if x < y",
        "body": [
            ";region If ${1:variable}(mem) < ${2:threshold}(const)",
            "   Recall         ${1:variable}",
            "   GoIfXLT        ${2:threshold},${3:label}",
            ";endregion ${1:variable} < ${2:threshold}"
        ]
    },
    "If Not Equal Template": {
        "prefix": "if x != y",
        "body": [
            ";region If ${1:variable}(mem) != ${2:threshold}(const)",
            "   Recall         ${1:variable}",
            "   GoIfXNE        ${2:threshold},${3:label}",
            ";endregion ${1:variable} != ${2:threshold}"
        ]
    },
    "If Equal Template": {
        "prefix": "if x == y",
        "body": [
            ";region If ${1:variable}(mem) == ${2:threshold}(const)",
            "   Recall         ${1:variable}",
            "   GoIfXEQ        ${2:threshold},${3:label}",
            ";endregion ${1:variable} == ${2:threshold}"
        ]
    },
    "If Less Template (float)": {
        "prefix": "if x < y (float)",
        "body": [
            ";region If ${1:variable}(mem) < ${2:threshold}(mem) (float)",
            "   fRecallW       ${1:variable}",
            "   fRecallQ       ${2:threshold}",
            "   fGoIfWLTQ      ${3:label}",
            ";endregion ${1:variable} < ${2:threshold} (float)"
        ]
    },
    "If Greater or Equal Template": {
        "prefix": "if x >= y",
        "body": [
            ";region If ${1:variable}(mem) >= ${2:threshold}(const)",
            "   Recall         ${1:variable}",
            "   GoIfXGE        ${2:threshold},${3:label}",
            ";endregion ${1:variable} >= ${2:threshold}"
        ]
    },
    "If Greater or Equal Template (float)": {
        "prefix": "if x >= y (float)",
        "body": [
            ";region If ${1:variable}(mem) >= ${2:threshold}(mem) (float)",
            "   fRecallW       ${1:variable}",
            "   fRecallQ       ${2:threshold}",
            "   fGoIfWGEQ      ${3:label}",
            ";endregion ${1:variable} >= ${2:threshold} (float)"
        ]
    },
    "If Less or Equal Template": {
        "prefix": "if x <= y",
        "body": [
            ";region If ${1:variable}(mem) <= ${2:threshold}(const)",
            "   Recall         ${1:variable}",
            "   GoIfXLE        ${2:threshold},${3:label}",
            ";endregion ${1:variable} <= ${2:threshold}"
        ]
    },
    "If Less or Equal Template (float)": {
        "prefix": "if x <= y (float)",
        "body": [
            ";region If ${1:variable}(mem) <= ${2:threshold}(mem) (float)",
            "   fRecallW         ${1:variable}",
            "   fRecallQ         ${2:threshold}",
            "   fGoIfWLEQ        ${3:label}",
            ";endregion ${1:variable} <= ${2:threshold} (float)"
        ]
    },
    "For Loop Reverse Template": {
        "prefix": "for reverse",
        "body": [
            ";region ${1:loopName}",
            ";for i=${2:start} <= ${3:end} reverse",
            "_${1:loopName}Start",
            "   LoadI          ${2:start}",
            "${1:loopName}Body",
            "   ItoX",
            "   GoIfXLT        ${3:end},${1:loopName}Exit",
            "   DecI           ;${4:ControlVariable}--",
            "   ${5:code}",
            "   GoTo           ${1:loopName}Body",
            "${1:loopName}Exit",
            ";endregion ${1:loopName}"
        ]
    },
    "For Loop Template": {
        "prefix": "for loop",
        "body": [
            ";region ${1:loopName}",
            ";for i=${2:start} <= ${3:end}",
            "_${1:loopName}Start",
            "   LoadI          ${2:start}",
            "${1:loopName}Body",
            "   ItoX",
            "   GoIfXGT        ${3:end},${1:loopName}Exit",
            "   IncI           ;${4:ControlVariable}--",
            "   ${5:code}",
            "   GoTo           ${1:loopName}Body",
            "${1:loopName}Exit",
            ";endregion ${1:loopName}"
        ]
    },
    "Do While Loop Template":{
        "prefix": "do while loop",
        "body": [
            ";region ${1:loopName}",
            ";do while not ${2:sentinel}",
            "_${1:loopName}",
            "   YieldTask ;Required in while loops",
            "   ${3:code}",
            "   GoIfST         ${2:sentinel},_${1:loopName}",
            "   GoTo           ${4:exit}",
            ";endregion ${1:loopName}"
        ]
    },
    "While Loop Template": {
        "prefix": "while loop",
        "body": [
            ";region ${1:loopName}",
            ";while not ${2:sentinel}",
            "_${1:loopName}_body",
            "   YieldTask ;Required in while loops",
            "   ${3:code}",
            "_${1:loopName}",
            "   GoIfST         ${2:sentinel} _${1:loopName}_body",
            "   GoTo           ${4:exit}",
            ";endregion ${1:loopName}"            
        ]
    },
    "Comment HR": {
        "prefix": "comment hr",
        "body": [
            ";==============================================================================="
        ]
    },
    "Comment Block": {
        "prefix": "comment block",
        "body": [
            "; ${1:regionHeading}",
            ";region=========================================================================",
            "; ${2:Comment Line 1}",
            "; ${3:Comment Line 2}",
            ";endregion======================================================================"
        ]
    },
    "OBLCD String Block Template": {
        "prefix": "oblcd-string-block",
        "body": [
            "${1:VariableName}",
            "                  ;01234567890123456789",
            "   NV0Byte        \"${2:Line1}\""
        ],
        "description": "Template for a string block"
    },
    "OBLCD String Block with 2 lines": {
        "prefix": "oblcd-string-block-2",
        "body": [
            "${1:VariableName}",
            "                  ;01234567890123456789",
            "   NV0Byte        \"${2:Line1}\"",
            "                  ;01234567890123456789",
            "   NV0Byte        \"${3:Line2}\""
        ],
        "description": "Template for a string block with 2 lines"
    },
    "OBLCD Println Template": {
        "prefix": "oblcd-println",
        "body": [
            "               ;01234567890123456789",
            "OBLCD_Text     \"${1:Line1}\""
        ]
    },
    "OBLCD Print Screen Template": {
        "prefix": "oblcd-print-screen",
        "body": [
            "OBLCD_Cls",
            "               ;01234567890123456789",
            "OBLCD_Text     \"${1:Line1}\"",
            "OBLCD_Text     \"${2:Line2}\""
        ]
    },
    "Addition Template (int)": {
        "prefix": "add int",
        "body": [
            ";region ${1:variable} = ${2:variable} + ${3:variable}",
            "   Recall          ${2:variable}",
            "   Push ; X to Y",
            "   Recall          ${3:variable}",
            "   ADD",
            "   Store          ${1:variable}",
            ";endregion ${1:variable} = ${2:variable} + ${3:variable}"
        ]
    },
    "Addition Templat (float)": {
        "prefix": "add float",
        "body": [
            ";region ${1:variable} = ${2:variable} + ${3:variable} (float)",
            "   fRecallW         ${2:variable}",
            "   fRecallQ         ${3:variable}",
            "   fAdd",
            "   fStore         ${1:variable}",
            ";endregion ${1:variable} = ${2:variable} + ${3:variable} (float)"
        ]
    },
    "Subtraction Template (int)": {
        "prefix": "subtract int",
        "body": [
            ";region ${1:variable} = ${2:variable} - ${3:variable}",
            "   Recall          ${2:variable}",
            "   Push ; X to Y",
            "   Recall          ${3:variable}",
            "   SUB",
            "   Store          ${1:variable}",
            ";endregion ${1:variable} = ${2:variable} - ${3:variable}"
        ]
    },
    "Subtraction Template (float)": {
        "prefix": "subtract float",
        "body": [
            ";region ${1:variable} = ${2:variable} - ${3:variable} (float)",
            "   fRecallQ         ${2:variable}",
            "   fRecallW         ${3:variable}",
            "   fSub",
            "   fStore         ${1:variable}",
            ";endregion ${1:variable} = ${2:variable} - ${3:variable} (float)"
        ]
    },
    "Assignment Operator (int)": {
        "prefix": "assign int",
        "body": [
            ";region ${1:variable} = ${2:value}",
            "   SetMem       ${1:variable},${2:value}",
            ";endregion ${1:variable} = ${2:variable}"
        ]
    },
    "Division Operator (float)": {
        "prefix": "divide float",
        "body": [
            ";region ${1:variable} = ${2:variable} / ${3:variable} (float)",
            "   fRecallQ         ${2:variable}",
            "   fRecallW         ${3:variable}",
            "   fDiv",
            "; Add BranchR for error checking",
            "   fStore         ${1:variable}",
            ";endregion ${1:variable} = ${2:variable} / ${3:variable} (float)"
        ]
    },
    "Multiplication Operator (float)": {
        "prefix": "multiply float",
        "body": [
            ";region ${1:variable} = ${2:variable} * ${3:variable} (float)",
            "   fRecallQ         ${2:variable}",
            "   fRecallW         ${3:variable}",
            "   fMul",
            "   fStore         ${1:variable}",
            ";endregion ${1:variable} = ${2:variable} * ${3:variable} (float)"
        ]
    },
    "Increment Operator": {
        "prefix": "++",
        "body": [
            ";region ${1:variable}++",
            "   Recall          ${1:variable}",
            "   IncX",
            "   Store          ${1:variable}",
            ";endregion ${1:variable}++"
        ]
    },
    "Increment Opertor (float)": {
        "prefix": "++ (float)",
        "body": [
            ";region ${1:variable}++ (float)",
            "   fRecallW         ${1:variable}",
            "   fInc",
            "   fStore         ${1:variable}",
            ";endregion ${1:variable}++ (float)"
        ]
    },
    "Decrement Operator": {
        "prefix": "--",
        "body": [
            ";region ${1:variable}--",
            "   Recall          ${1:variable}",
            "   DecX",
            "   Store          ${1:variable}",
            ";endregion ${1:variable}--"
        ]
    },
    "Decrement Operator (float)": {
        "prefix": "-- (float)",
        "body": [
            ";region ${1:variable}-- (float)",
            "   fRecallW         ${1:variable}",
            "   fDec",
            "   fStore         ${1:variable}",
            ";endregion ${1:variable}-- (float)"
        ]
    },
    "Cast Float to Int Template": {
        "prefix": "cast float to int",
        "body": [
            ";region ${1:variable} = ${2:variable} (float)",
            "   fRecallW         ${2:variable}",
            "   fix",
            "   Store            ${1:variable}",
            ";endregion ${1:variable} = ${2:variable} (float)"
        ]
    },
    "Blink Template": {
        "prefix": "blink",
        "body": [
            ";region Blink ${1:output}",
            "   BlinkMask      %${2:pattern}",
            "   Blink          ${1:output}",
            ";endregion Blink ${1:output}"
        ]
    }
}